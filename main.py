# Generated by Selenium IDE
import os
import sys
import time
import json
import requests
import datetime
import schedule
import pytesseract #brew install tesseract
from PIL import Image
from selenium import webdriver
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager

chrome_name = ChromeDriverManager().install()

if os.name == 'nt':
    pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
    chrome_name += '.exe'

def digits_ocr(img_path):
    img = Image.open(requests.get(img_path, stream=True, verify=False).raw) # ignore ssh certificate
    digits = pytesseract.image_to_string(img, lang='eng')
    digits = ''.join([s for s in digits if s.isdigit()])
    return digits


class Registerrobot():
    def set_method(self, path = chrome_name):
        start_time = datetime.datetime.now()
        print('initial browser ... ', start_time)
        options = webdriver.ChromeOptions()
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        options.add_experimental_option("prefs", {"profile.password_manager_enabled": False, "credentials_enable_service": False})
        self.driver = webdriver.Chrome(path, chrome_options=options)
        self.vars = {}
        end_time = datetime.datetime.now()
        print('browser ready ... ', end_time, 'cost : ', end_time - start_time)
    
    def teardown_method(self):
        self.driver.save_screenshot(f'register_result_{sys.argv[2].replace(":", "_")}.png')
        self.driver.quit()
        
    def prepare(self):
        start_time = datetime.datetime.now()
        print('prepare webpage ... ', start_time)
        self.driver.get("http://register.vhtt.gov.tw/register/")
        self.driver.switch_to.frame(1)
        self.driver.find_element(By.LINK_TEXT, '門診預約掛號').click()
        self.driver.switch_to.default_content()
        self.driver.switch_to.frame(2)
        end_time = datetime.datetime.now()
        print('Finish prepare.', end_time, 'cost : ', end_time - start_time)
        
    def fill_in(self, 
                ID = 'V200665217', 
                BirthYear = '42', 
                BirthMonth = '10',
                BirthDaye = '22'):
        start_time = datetime.datetime.now()
        self.driver.find_element(By.LINK_TEXT, "傳統醫學科").click() # it usually take 0.9s
        step_time = datetime.datetime.now()
        print('get 傳統醫學科', step_time, 'cost sum :',   step_time - start_time)
        time.sleep(2)
        self.driver.find_elements(By.TAG_NAME, 'a')[-3].click()
        step_time = datetime.datetime.now()
        print('get 門診', step_time, 'cost sum :',   step_time - start_time)

        # Personal INFO
        ## ID
        self.driver.find_element(By.NAME, "patientID").send_keys(ID)
        ## birth Year
        self.driver.find_element(By.NAME, "patientBirthYear").send_keys(BirthYear)        
        ## birthday
        dropdown = self.driver.find_element(By.NAME, "patientBirthMonth")
        dropdown.find_element(By.XPATH, f"//option[. = '{BirthMonth}']").click()
        dropdown = self.driver.find_element(By.NAME, "patientBirthDate")
        dropdown.find_element(By.XPATH, f"//option[. = '{BirthDaye}']").click()
        step_time = datetime.datetime.now()
        print('fill in personal info', step_time, 'cost sum :',   step_time - start_time)    
        
        # ocr get digits
        self.images = self.driver.find_element(By.TAG_NAME, 'img')
        time.sleep(2)
        self.digits_git_path = self.images.get_attribute('src')
        self.digits = digits_ocr(self.digits_git_path)
        step_time = datetime.datetime.now()
        print(f'OCR Finish {self.digits}', step_time, 'cost sum :',   step_time - start_time)    
        self.driver.find_element(By.NAME, "pass").send_keys(self.digits)
        print(f'fill ocr {self.digits}', step_time, 'cost sum :',   step_time - start_time)    

    
    
    def to_register(self):
        # to register
        start_time = datetime.datetime.now()
        self.driver.find_element(By.ID, "Submit").click()
        step_time = datetime.datetime.now()
        print('Submit', step_time, 'cost sum :',   step_time - start_time)
        time.sleep(3)
        date_str = datetime.datetime.now().strftime("%Y%m%d")
        self.driver.save_screenshot(f'register_result_{date_str}_{sys.argv[2].replace(":", "_")}.png')
        
        
        
if __name__ == '__main__':
    
    register001 = Registerrobot()
    
    def ready(t):
        register001.set_method()
        register001.prepare()
        register001.fill_in()
        print(t)
        
    def run(t):
        try:
            register001.to_register()
            time.sleep(10)
            print(t)
        except Exception as e :
            print(e)

        register001.teardown_method()
        
    # set for sunday
    schedule.every().sunday.at(sys.argv[1]).do(ready,f'open browser for ready at {sys.argv[1]}')
    schedule.every().sunday.at(sys.argv[2]).do(run,f'to register {sys.argv[2]}')

    # set for monday
    schedule.every().monday.at(sys.argv[1]).do(ready,f'open browser for ready at {sys.argv[1]}')
    schedule.every().monday.at(sys.argv[2]).do(run,f'to register {sys.argv[2]}')

    # set for tuesday
    schedule.every().tuesday.at(sys.argv[1]).do(ready,f'open browser for ready at {sys.argv[1]}')
    schedule.every().tuesday.at(sys.argv[2]).do(run,f'to register {sys.argv[2]}')
    
    # set for wednesday
    schedule.every().wednesday.at(sys.argv[1]).do(ready,f'open browser for ready at {sys.argv[1]}')
    schedule.every().wednesday.at(sys.argv[2]).do(run,f'to register {sys.argv[2]}')


    
    while True:
        schedule.run_pending()     
