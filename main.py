# Generated by Selenium IDE
import os
import sys
import time
import json
import yaml
import argparse
import requests
import datetime
import schedule
import pytesseract #brew install tesseract
from PIL import Image
from selenium import webdriver
from selenium.webdriver.common.by import By
# from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.microsoft import EdgeChromiumDriverManager
from timesync import sync_pc_time


chrome_name = EdgeChromiumDriverManager().install()
register_time = None

if os.name == 'nt':
    pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
    chrome_name += '.exe'
    
def digits_ocr(img_path):
    img = Image.open(requests.get(img_path, stream=True, verify=False).raw) # ignore ssh certificate
    digits = pytesseract.image_to_string(img, lang='eng')
    digits = ''.join([s for s in digits if s.isdigit()])
    return digits

class Registerrobot():
    def set_method(self, args, path = chrome_name):
        start_time = datetime.datetime.now()
        print('initial browser ... ', start_time)
        options = webdriver.EdgeOptions()
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        options.add_experimental_option("prefs", {"profile.password_manager_enabled": False, "credentials_enable_service": False})
        self.driver = webdriver.Edge(path, options=options)
        self.args = args
        self.vars = {}
        end_time = datetime.datetime.now()
        print('browser ready ... ', end_time, 'cost : ', end_time - start_time)
    
    def teardown_method(self):
        date_str = datetime.datetime.now().strftime("%Y%m%d")
        self.driver.save_screenshot(f'screenshot/register_result_{date_str}_{self.ID}_{self.args.register_time.replace(":", "_")}_teardown.png')
        self.driver.quit()
        
    def prepare(self):
        start_time = datetime.datetime.now()
        print('prepare webpage ... ', start_time)
        self.driver.get("http://register.vhtt.gov.tw/register/")
        self.driver.switch_to.frame(1)
        self.driver.find_element(By.LINK_TEXT, '門診預約掛號').click()
        self.driver.switch_to.default_content()
        self.driver.switch_to.frame(2)
        end_time = datetime.datetime.now()
        print('Finish prepare.', end_time, 'cost : ', end_time - start_time)
        
    def fill_in(self, 
                ID, 
                BirthYear, 
                BirthMonth,
                BirthDaye):
        start_time = datetime.datetime.now()
        self.driver.find_element(By.LINK_TEXT, "傳統醫學科").click() # it usually take 0.9s
        step_time = datetime.datetime.now()
        print('get 傳統醫學科', step_time, 'cost sum :',   step_time - start_time)
        time.sleep(2)
        clinic_icon = self.driver.find_elements(By.TAG_NAME, 'a')[-3]
        if self.driver.find_elements(By.TAG_NAME, 'td')[-5].text == '五':
            clinic_icon = self.driver.find_elements(By.TAG_NAME, 'a')[-2]
        step_time_pre = datetime.datetime.now()
        clinic_icon.click()
        step_time = datetime.datetime.now()
        print('get 門診', step_time, step_time_pre, 'cost sum :',   step_time - start_time)

        # Personal INFO
        ## ID
        self.driver.find_element(By.NAME, "patientID").send_keys(ID)
        ## birth Year
        self.driver.find_element(By.NAME, "patientBirthYear").send_keys(BirthYear)        
        ## birthday
        dropdown = self.driver.find_element(By.NAME, "patientBirthMonth")
        dropdown.find_element(By.XPATH, f"//option[. = '{BirthMonth}']").click()
        dropdown = self.driver.find_element(By.NAME, "patientBirthDate")
        dropdown.find_element(By.XPATH, f"//option[. = '{BirthDaye}']").click()
        step_time = datetime.datetime.now()
        print('fill in personal info', step_time, 'cost sum :',   step_time - start_time)    
        
        # ocr get digits
        self.images = self.driver.find_element(By.TAG_NAME, 'img')
        time.sleep(2)
        self.digits_git_path = self.images.get_attribute('src')
        self.digits = digits_ocr(self.digits_git_path)
        step_time = datetime.datetime.now()
        print(f'OCR Finish {self.digits}', step_time, 'cost sum :',   step_time - start_time)    
        self.driver.find_element(By.NAME, "pass").send_keys(self.digits)
        print(f'fill ocr {self.digits}', step_time, 'cost sum :',   step_time - start_time)
        
        # sync time
        sync_pc_time()
        local_time = datetime.datetime.now()
        print("Local system time:", local_time.strftime('%Y-%m-%d %H:%M:%S:%ms'))
        
        # find submit button
        start_time = datetime.datetime.now()
        self.submit = self.driver.find_element(By.ID, "Submit")
        step_time = datetime.datetime.now()
        print('Find Submit button', step_time, 'cost sum :',   step_time - start_time)
        date_str = datetime.datetime.now().strftime("%Y%m%d")
        print(self.args)
        self.ID = ID
        self.driver.save_screenshot(f'screenshot/register_result_{date_str}_{ID}_{self.args.register_time.replace(":", "_")}_prepare.png')
        
    
    def to_register(self, suffix = ''):
        # to register
        self.submit.click()
        time.sleep(3)
        date_str = datetime.datetime.now().strftime("%Y%m%d")
        self.driver.save_screenshot(f'screenshot/register_result_{date_str}_{suffix}_{self.args.register_time.replace(":", "_")}_to_register.png')
        
        
        
if __name__ == '__main__':
    
    parser = argparse.ArgumentParser()
    parser.add_argument("ready_time", help="Time to open browser for ready")
    parser.add_argument("register_time", help="Time to register")
    parser.add_argument("--delay", type=float, default=0, help="Delay in seconds before registration")
    parser.add_argument("--id", type=str, default=0, help="the id info YAML for the registration target")
    args = parser.parse_args()

    
    register001 = Registerrobot()
    id_info = yaml.safe_load(open(args.id))
    
    def ready(t):
        register001.set_method(args = args)
        register001.prepare()
        register001.fill_in(**id_info)
        print(t)
        
    def run(t):
        try:
            time.sleep(args.delay)
            register001.to_register(suffix = id_info['ID'])
            date_str = datetime.datetime.now().strftime('%H:%M:%S.%f')
            time.sleep(10)
            print(t, 'local time is', date_str)
        except Exception as e :
            print(e)

        register001.teardown_method()

        
    # set for sunday
    schedule.every().sunday.at(args.ready_time).do(ready,f'open browser for ready at {args.ready_time}')
    schedule.every().sunday.at(args.register_time).do(run,f'to register {args.register_time}')

    # set for monday
    schedule.every().monday.at(args.ready_time).do(ready,f'open browser for ready at {args.ready_time}')
    schedule.every().monday.at(args.register_time).do(run,f'to register {args.register_time}')

    # set for tuesday
    schedule.every().tuesday.at(args.ready_time).do(ready,f'open browser for ready at {args.ready_time}')
    schedule.every().tuesday.at(args.register_time).do(run,f'to register {args.register_time}')
    
    # set for wednesday
    schedule.every().wednesday.at(args.ready_time).do(ready,f'open browser for ready at {args.ready_time}')
    schedule.every().wednesday.at(args.register_time).do(run,f'to register {args.register_time}')
    
    # set for friday
    schedule.every().friday.at(args.ready_time).do(ready,f'open browser for ready at {args.ready_time}')
    schedule.every().friday.at(args.register_time).do(run,f'to register {args.register_time}')


    
    while True:
        schedule.run_pending()     
